#Пусть ваша программа запрашивает у пользователя обозначение ноты 
#и показывает ее частоту согласно приведенной таблице. После этого вы 
#можете доработать свою программу таким образом, чтобы она поддер-
#живала все октавы, начиная от субконтроктавы (C0) до пятой октавы (C8). 
#И хотя можно это реализовать путем добавления бесконечного количества блоков if, это будет довольно громоздким, недостаточно элегантным 
#и просто неприемлемым решением данной задачи. Вместо этого при рас-
#четах лучше использовать отношения между одними и теми же нотами 
#в соседствующих октавах. К примеру, частота любой ноты октавы n будет 
#составлять ровно половину от частоты той же ноты октавы n + 1. Исполь-
#зуя это соотношение, вы без труда сможете добавить в  свою програм-
#му учет всех нот любой октавы без присутствия бесчисленных условных 
#блоков.

pattern = {
    'C': 130.81,
    'D': 146.83,
    'E': 164.81,
    'F': 174.61,
    'G': 196,
    'A': 220,
    'B': 246.94
}

note = input('Enter note and octave: ')
if note[1] == '0':
    print(f'Frequency of your note is {pattern[note[0].capitalize()]}')
else:
    frequency = pattern[note[0].capitalize()]
    for i in range(int(note[1])):
        frequency *= 2
    print(f'Frequency of your note is {frequency}')
